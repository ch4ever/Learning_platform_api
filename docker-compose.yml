# Comments are provided throughout this file to help you get started.
# If you need more help, visit the Docker Compose reference guide at
# https://docs.docker.com/go/compose-spec-reference/

# Here the instructions define your application as a service called "server".
# This service is built from the Dockerfile in the current directory.
# You can add other services your application may depend on here, such as a
# database or a cache. For examples, see the Awesome Compose repository:
# https://github.com/docker/awesome-compose

x-develop: &develop
  watch:
    - path: .
      action: sync
      target: /app

services:
  db:
    image: postgres:14
    container_name: platform_db
    environment:
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASS}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - platform_network
    env_file:
      .env

  rabbit:
    image: rabbitmq:3-management
    container_name: platform_rabbit_broker
    ports:
      - "5672:5672"
      - "15672:15672"
    networks:
      - platform_network
    environment:
      RABBITMQ_DEFAULT_USER: nik
      RABBITMQ_DEFAULT_PASS: 1234
    healthcheck:
      test: [ "CMD", "rabbitmqctl", "status" ]
      interval: 5s
      timeout: 10s
      retries: 5

  celery:
    build:
      context: .
    container_name: platform_celery
    command: >
      sh -c "until nc -z rabbit 5672; do
             echo 'Waiting for RabbitMQ...';
             sleep 2;
           done;
           celery -A Learning_platform worker -l info"
    depends_on:
      - web
      - db
      - rabbit
    networks:
      - platform_network
    env_file:
      - .env

  web:
    build:
      context: .
#    environment:
#      - USE_DOCKER=1
    container_name: LPlatform_django
    develop:
      <<: *develop
    command: >
      sh -c "until nc -z rabbit 5672; do
               echo 'Waiting for RabbitMQ from web...';
               sleep 2;
             done;
             python manage.py runserver 0.0.0.0:8000"
    ports:
      - "8000:8000"
    env_file:
      - .env
    depends_on:
      - db
      - rabbit
    networks:
      - platform_network



volumes:
  postgres_data:
networks:
  platform_network:

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

